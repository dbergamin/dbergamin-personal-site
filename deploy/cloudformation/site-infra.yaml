AWSTemplateFormatVersion: "2010-09-09"
Parameters:

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
  DomainName:
    Type: String
  CertificateArn:
    Type: String
  Nonce:
    Type: String

Resources:

  WebsiteContentBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName:
        Fn::Sub: "site-${DomainName}-contents"

  WebsiteLoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName:
        Fn::Sub: "site-${DomainName}-logs"

  WebsiteContentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: WebsiteContentBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource:
              Fn::Sub: arn:aws:s3:::${WebsiteContentBucket}/*
            Principal:
              AWS:
                Fn::Sub: "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${WebsiteCloudFrontOAI}"

  WebsiteCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName:
              Fn::Sub: "${WebsiteContentBucket}.s3.amazonaws.com"
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Sub: "origin-access-identity/cloudfront/${WebsiteCloudFrontOAI}"
        DefaultRootObject: index.html
        Enabled: true
        Logging:
          IncludeCookies: false
          Bucket:
            Fn::Sub: "${WebsiteLoggingBucket}.s3.amazonaws.com"
          Prefix: logs
        Aliases:
          - Ref: DomainName
        HttpVersion: http2
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
          - EventType: viewer-request
            LambdaFunctionARN: !GetAtt IndexLambdaVersion.FunctionArn
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn:
            Ref: CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2018

  WebsiteCloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:
          Ref: DomainName

  CDNRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Fn::Sub: "${DomainName}."
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName:
          Fn::GetAtt: WebsiteCDN.DomainName

  DefaultIndexFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Handler: index.handler
      Timeout: 5
      Role:
        Fn::Sub: "arn:aws:iam::${AWS::AccountId}:role/${DefaultIndexFunctionRole}"
      Code:
        ZipFile: |
          // Sourced from https://aws.amazon.com/blogs/compute/implementing-default-directory-indexes-in-amazon-s3-backed-amazon-cloudfront-origins-using-lambdaedge/
          exports.handler = (event, context, callback) => {
            // Extract the request from the CloudFront event that is sent to Lambda@Edge
            var request = event.Records[0].cf.request;

            // Extract the URI from the request
            var olduri = request.uri;
            
            // Match any '/' that occurs at the end of a URI. Replace it with a default index
            var newuri = olduri.replace(/\/$/, '\/index.html');

            // Log the URI as received by CloudFront and the new URI to be used to fetch from origin
            console.log("Old URI: " + olduri);
            console.log("New URI: " + newuri);

            // Replace the received URI with the URI that includes the index page
            request.uri = newuri;

            // Return to CloudFront
            return callback(null, request);
          }

  DefaultIndexFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  IndexLambdaVersion:
    Type: Custom::LatestLambdaVersion
    Properties:
      ServiceToken: !GetAtt PublishLambdaVersion.Arn
      FunctionName: !Ref DefaultIndexFunction
      Nonce: !Ref Nonce

  # Custom resource for getting latest version of a lambda,
  # as required by CloudFront.

  PublishLambdaVersion:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt PublishLambdaVersionRole.Arn
      Code:
        ZipFile: |
          const {Lambda} = require('aws-sdk')
          const {send, SUCCESS, FAILED} = require('cfn-response')
          const lambda = new Lambda()
          exports.handler = (event, context) => {
            const {RequestType, ResourceProperties: {FunctionName}} = event
            if (RequestType == 'Delete') return send(event, context, SUCCESS)
            lambda.publishVersion({FunctionName}, (err, {FunctionArn}) => {
              err
                ? send(event, context, FAILED, err)
                : send(event, context, SUCCESS, {FunctionArn})
            })
          }

  PublishLambdaVersionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: PublishVersion
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:PublishVersion
            Resource: '*'

Outputs:

  WebsiteContentBucket:
    Description: The S3 bucket from which the contents are delivered
    Value:
      Ref: WebsiteContentBucket
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-WebsiteContentBucket
  WebsiteLoggingBucket:
    Description: The S3 bucket to which the access logs are saved
    Value:
      Ref: WebsiteLoggingBucket
  CloudFrontDistributionId:
    Description: The ID of the CloudFront distribution
    Value:
      Ref: WebsiteCDN
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-CloudFrontDistributionId